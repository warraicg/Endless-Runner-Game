
#include <iostream>
#include <iomanip>
#include <cstdlib>
#include <ctime>
#include <string>
#include <fstream>
#include <conio.h>

using namespace std;

void makeGrid(char arr[][62], char player[][3], int playerPosition[], const int rows, const int cols);
void showGrid(char arr[][62], const int rows, const int cols);
void movePlayer(char arr[][62], char player[][3], int playerPosition[], const int rows, const int cols);
void obstackleCreate(char arr[][62], char obstackle[3][3], int obstacklePosition[][2], int playerPosition[], const int rows, const int cols);
bool checkHit(char arr[][62], char obstackle[3][3], int obstacklePosition[][2], int playerPosition[], const int rows, const int cols);

int Score = 0;
int Lives = 3;

int main()
{
	fstream File;
	File.open("Output.txt", ios::app);
	srand(time(0));
	const int rows = 32, cols = 62;
	char grid[rows][cols];
	char player[3][3] = { {' ','*',' '},{'\\','|','/'},{'|','|','|'} };
	char obstackle[3][3] = { {'<','-','>'},{'<',' ','>'},{'<','-','>'} };
	int playerPosition[2] = { 0,0 };
	int obstacklePosition[3][2] = { {-1,-1},{-1,-1},{-1,-1} };
	makeGrid(grid, player, playerPosition, rows, cols);

	string name;
	cout << "Enter Your Name: ";
	getline(cin, name);

	while (Lives > 0)
	{
		system("CLS");

		showGrid(grid, rows, cols);

		movePlayer(grid, player, playerPosition, rows, cols);

		obstackleCreate(grid, obstackle, obstacklePosition, playerPosition, rows, cols);


	}

	showGrid(grid, rows, cols);

	File << "Name: " << name << " Score: " << Score << endl;


	system("pause");
	return 0;
}

void makeGrid(char arr[][62], char player[][3], int playerPosition[], const int rows, const int cols)
{
	for (int i = 0; i < rows; i++)
	{
		for (int j = 0; j < cols; j++)
		{
			if (i == 0 || i == rows - 1)
			{
				arr[i][j] = '_';
			}
			else if (j == 0 || j == cols - 1)
			{
				arr[i][j] = '|';
			}
			else
			{
				arr[i][j] = ' ';
			}
		}
	}

	int Rs = 7, Re = rows / 3;
	int Cs = 1, Ce = cols / 3;


	int r, c;
	do
	{
		r = rand() % (Re + 1);
	} while (r < Rs || r >= Re);

	do
	{
		c = rand() % (Ce + 1);
	} while (c < Cs || c >= Ce);
	playerPosition[0] = r;
	playerPosition[1] = c;
	r *= 3, c *= 3;

	for (int i = r; i < r + 3; i++)
	{
		for (int j = c; j < c + 3; j++)
		{
			arr[i][j] = player[i - r][j - c];
		}
	}

}

void showGrid(char arr[][62], const int rows, const int cols)
{
	cout << "Score: " << setw(5) << Score << " Lives: " << Lives << endl;
	for (int i = 0; i < rows; i++)
	{
		for (int j = 0; j < cols; j++)
		{
			cout << arr[i][j];
		}
		cout << endl;
	}
}

void movePlayer(char arr[][62], char player[][3], int playerPosition[], const int rows, const int cols)
{
	for (int i = playerPosition[0] * 3; i < playerPosition[0] * 3 + 3; i++)
	{
		for (int j = playerPosition[1] * 3; j < playerPosition[1] * 3 + 3; j++)
		{
			arr[i][j] = ' ';
		}
	}
	int Rs = 7, Re = rows / 3;
	int Cs = 1, Ce = cols / 3;
	char c;
	c = _getch();
	switch (c)
	{
	case 'w':
	case 'W':
		if (playerPosition[0] - 1 >= Rs)
		{
			playerPosition[0]--;
		}
		break;
	case 'a':
	case 'A':
		if (playerPosition[1] - 1 >= Cs)
		{
			playerPosition[1]--;
		}
		break;
	case 'S':
	case 's':
		if (playerPosition[0] + 1 < Re)
		{
			playerPosition[0]++;
		}
		break;
	case 'D':
	case 'd':
		if (playerPosition[1] + 1 < Ce)
		{
			playerPosition[1]++;
		}
		break;
	default:
		break;
	}
	for (int i = playerPosition[0] * 3; i < playerPosition[0] * 3 + 3; i++)
	{
		for (int j = playerPosition[1] * 3; j < playerPosition[1] * 3 + 3; j++)
		{
			arr[i][j] = player[i - playerPosition[0] * 3][j - playerPosition[1] * 3];
		}
	}
}

void obstackleCreate(char arr[][62], char obstackle[3][3], int obstacklePosition[][2], int playerPosition[], const int rows, const int cols)
{
	static int obs = 0;

	if (obs != 0)
	{
		for (int i = 0; i < 3; i++)
		{
			if (obstacklePosition[i][0] != -1)
			{
				obstacklePosition[i][0]++;
				if (checkHit(arr, obstackle, obstacklePosition, playerPosition, rows, cols))
				{
					Lives--;
					obs--;
					obstacklePosition[i][0]--;
					for (int j = obstacklePosition[i][0] * 3; j < obstacklePosition[i][0] * 3 + 3; j++)
					{
						for (int k = obstacklePosition[i][1] * 3; k < obstacklePosition[i][1] * 3 + 3; k++)
						{
							arr[j][k] = ' ';
						}
					}
					obstacklePosition[i][0] = -1;
					obstacklePosition[i][1] = -1;
				}
				else if (obstacklePosition[i][0] >= rows / 3)
				{
					obstacklePosition[i][0]--;
					for (int j = obstacklePosition[i][0] * 3; j < obstacklePosition[i][0] * 3 + 3; j++)
					{
						for (int k = obstacklePosition[i][1] * 3; k < obstacklePosition[i][1] * 3 + 3; k++)
						{
							arr[j][k] = ' ';
							Score += 10;
							//obstackle[j - obstacklePosition[j][0] * 3][k - obstacklePosition[j][1] * 3];
						}
					}
					obs--;
					obstacklePosition[i][0] = -1;
					obstacklePosition[i][1] = -1;
				}
				else
				{
					for (int j = obstacklePosition[i][0] * 3; j < obstacklePosition[i][0] * 3 + 3; j++)
					{
						for (int k = obstacklePosition[i][1] * 3; k < obstacklePosition[i][1] * 3 + 3; k++)
						{
							int temp = arr[j][k];
							arr[j][k] = arr[j - 3][k];
							arr[j - 3][k] = temp;
						}
					}
				}
			}
		}
	}
	if (obs == 3)
	{
		return;
	}
	else
	{
		obs++;
		for (int i = 0; i < 3; i++)
		{
			if (obstacklePosition[i][0] == -1)
			{
				int Rs = 1, Re = 3;
				int Cs = 1, Ce = cols / 3;

				int r, c;
				do
				{
					do
					{
						r = rand() % (Re + 1);
					} while (r < Rs || r >= Re);

					do
					{
						c = rand() % (Ce + 1);
					} while (c < Cs || c >= Ce);
				} while (checkHit(arr, obstackle, obstacklePosition, obstacklePosition[i], rows, cols));
				obstacklePosition[i][0] = r;
				obstacklePosition[i][1] = c;
				for (int j = obstacklePosition[i][0] * 3; j < obstacklePosition[i][0] * 3 + 3; j++)
				{
					for (int k = obstacklePosition[i][1] * 3; k < obstacklePosition[i][1] * 3 + 3; k++)
					{
						arr[j][k] = obstackle[j - obstacklePosition[i][0] * 3][k - obstacklePosition[i][1] * 3];
					}
				}
				break;
			}
		}
	}
}

bool checkHit(char arr[][62], char obstackle[3][3], int obstacklePosition[][2], int playerPosition[], const int rows, const int cols)
{
	if (playerPosition[0] == -1)
	{
		return false;
	}
	int c = 0;
	for (int i = 0; i < 3; i++)
	{
		if (obstacklePosition[i][0] == playerPosition[0] && obstacklePosition[i][1] == playerPosition[1])
		{
			for (int i = playerPosition[0]; i < playerPosition[0] + 3; i++)
			{
				for (int j = playerPosition[1]; j < playerPosition[0] + 3; j++)
				{
					arr[i][j] = ' ';
				}
			}
			return true;
			c++;
		}
	}
	if (c > 1)
	{

	}
	return false;
}
